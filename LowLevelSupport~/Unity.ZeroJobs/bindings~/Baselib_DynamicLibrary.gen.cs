//
// File autogenerated from Include/C/Baselib_DynamicLibrary.h
//

using System;
using System.Runtime.InteropServices;
using size_t = System.UIntPtr;

namespace Unity.Baselib.LowLevel
{
    internal static unsafe partial class Binding
    {
        [StructLayout(LayoutKind.Sequential)]
        public struct Baselib_DynamicLibrary_Handle
        {
            public IntPtr handle;
        }
        /// <summary>Open a dynamic library.</summary>
        /// <remarks>
        /// Dynamic libraries are reference counted, so if the same library is loaded again
        /// with Baselib_DynamicLibrary_Open, the same file handle is returned.
        /// It is also possible to load two different libraries containing two different functions that have the same name.
        ///
        /// Please note that additional error information should be retrieved via error state explain and be presented to the end user.
        /// This is needed to improve ergonomics of debugging library loading issues.
        ///
        /// Possible error codes:
        /// - Baselib_ErrorCode_FailedToOpenDynamicLibrary: Unable to open requested dynamic library.
        /// </remarks>
        /// <param name="pathname">
        /// Library file to be opened.
        /// If relative pathname is provided, platform library search rules are applied (if any).
        /// If nullptr is passed, Baselib_ErrorCode_InvalidArgument will be risen.
        /// </param>
        [DllImport(BaselibNativeLibrary.DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Baselib_DynamicLibrary_Handle Baselib_DynamicLibrary_Open(byte* pathname, Baselib_ErrorState* errorState);
        /// <summary>Lookup a function in a dynamic library.</summary>
        /// <remarks>
        /// Possible error codes:
        /// - Baselib_ErrorCode_FunctionNotFound: Requested function was not found.
        /// </remarks>
        /// <param name="handle">
        /// Library handle.
        /// If Baselib_DynamicLibrary_Handle_Invalid is passed, Baselib_ErrorCode_InvalidArgument will be risen.
        /// </param>
        /// <param name="functionName">
        /// Function name to look for.
        /// If nullptr is passed, Baselib_ErrorCode_InvalidArgument will be risen.
        /// </param>
        /// <returns>pointer to the function (can be NULL for symbols mapped to NULL).</returns>
        [DllImport(BaselibNativeLibrary.DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr Baselib_DynamicLibrary_GetFunction(Baselib_DynamicLibrary_Handle handle, byte* functionName, Baselib_ErrorState* errorState);
        /// <summary>Close a dynamic library.</summary>
        /// <remarks>
        /// Decreases reference counter, if it becomes zero, closes the library.
        /// If system api will return an error during this operation, the process will be aborted.
        /// </remarks>
        /// <param name="handle">
        /// Library handle.
        /// If Baselib_DynamicLibrary_Handle_Invalid is passed, function is no-op.
        /// </param>
        [DllImport(BaselibNativeLibrary.DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void Baselib_DynamicLibrary_Close(Baselib_DynamicLibrary_Handle handle);
    }
}
